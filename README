Επιλογές Σχεδιασμού Προγράμματος

Χρήση της δομής node για την αναπαράσταση ενός λογαριασμού χρήστη, της δομής edge για την αναπαράσταση των συναλλαγών.
Χρησιμοποιείται επίσης ο γράφος και ο πίνακας κατακερματισμού για τις λειτουργίες της εφαρμογής.

Γράφος:

* Δυναμική Δομή: Ο γράφος υλοποιείται με συνδεδεμένες λίστες, επιτρέποντας την δυναμική προσθήκη και αφαίρεση κόμβων και ακμών.

Πίνακας Κατακερματισμού:

Ο πίνακας κατακερματισμού χρησιμοποιείται ως βοηθητική δομή για την γρήγορη αναζήτηση κόμβων με βάση το αναγνωριστικό τους.

* Αποδοτική Αναζήτηση: Ο κατακερματισμός επιτρέπει την αναζήτηση κόμβων σε σταθερό χρόνο κατά μέσο όρο, βελτιώνοντας δραστικά την αποδοτικότητα σε σχέση με την γραμμική αναζήτηση.
* Δυναμικό Μέγεθος: Ο πίνακας κατακερματισμού αυξάνει αυτόματα το μέγεθός του όταν ο αριθμός των στοιχείων υπερβαίνει ένα όριο, διατηρώντας την αποδοτικότητα αναζήτησης.
* Διαχείριση Συνωνύμων:  Η χρήση συνδεδεμένων λιστών για την διαχείριση  συνωνύμων (δηλαδή, στοιχεία με το ίδιο κλειδί κατακερματισμού)  εξασφαλίζει την ορθή αποθήκευση και ανάκτηση όλων των κόμβων.

Λειτουργίες:

Το πρόγραμμα παρέχει πλούσιες λειτουργίες για την διαχείριση των οικονομικών συναλλαγών:

* Εισαγωγή/Διαγραφή:  Δυνατότητα εισαγωγής νέων κόμβων και ακμών καθώς και διαγραφή υπαρχόντων.
* Τροποποίηση:  Επιτρέπει την τροποποίηση των χαρακτηριστικών μιας ακμής (π.χ., ποσό, ημερομηνία).
* Αναζήτηση:  Παρέχει λειτουργίες για την εύρεση όλων των ακμών ενός κόμβου, όλων των εισερχόμενων ακμών, και την ανίχνευση κύκλων στον γράφο.
* Εισαγωγή/Εξαγωγή:  Επιτρέπει την εισαγωγή δεδομένων από αρχείο και την εξαγωγή των δεδομένων του γράφου σε αρχείο.
* Διαχείριση Μνήμης:  Το πρόγραμμα διαχειρίζεται δυναμικά την μνήμη,  ελευθερώνοντας τους πόρους που δεν χρησιμοποιούνται, αποτρέποντας διαρροές μνήμης.

Συνοψίζοντας, οι επιλογές σχεδιασμού του προγράμματος εστιάζουν στην ευελιξία, την αποδοτικότητα, και την ορθή διαχείριση  μνήμης. Η χρήση γράφου και πίνακα κατακερματισμού προσφέρει ένα ισχυρό  πλαίσιο  για την αποθήκευση  και  διαχείριση  οικονομικών συναλλαγών. 

Πολυπλοκότητα Συναρτήσεων Δυναμικών Δομών

Συναρτήσεις Graph:

* create_graph(): Η συνάρτηση αυτή δημιουργεί ένα κενό γράφο.  Η πολυπλοκότητά της είναι O(1).
* add_node(): Η συνάρτηση αυτή προσθέτει έναν νέο κόμβο στο γράφο.  Η πολυπλοκότητά της είναι O(1).
* delete_node(): Η συνάρτηση αυτή διαγράφει έναν κόμβο από το γράφο.  Η πολυπλοκότητα της είναι O(n + m), όπου n είναι ο αριθμός των κόμβων και m ο αριθμός των ακμών, γιατί πρέπει να διαγραφούν όλες οι ακμές που συνδέονται με τον κόμβο και να ενημερωθεί η λίστα των κόμβων.
* add_edge():  Η συνάρτηση αυτή προσθέτει μια νέα ακμή στο γράφο.  Η πολυπλοκότητά της είναι O(1).
* modify_edge(): Η συνάρτηση αυτή τροποποιεί μια υπάρχουσα ακμή. Η πολυπλοκότητά της είναι  O(m) worst case, m είναι ο αριθμός των ακμών του κόμβου, καθώς μπορεί να χρειαστεί να διατρέξει όλες τις ακμές για να βρει την ακμή που πρέπει να τροποποιηθεί. 
* find_all_edges(): Η συνάρτηση αυτή βρίσκει και εκτυπώνει όλες τις ακμές που ξεκινούν από έναν δεδομένο κόμβο. Η πολυπλοκότητά της είναι O(m), όπου m είναι ο αριθμός των ακμών που ξεκινούν από τον κόμβο.
* find_all_incoming_edges():  Η συνάρτηση αυτή βρίσκει και εκτυπώνει όλες τις εισερχόμενες ακμές ενός δεδομένου κόμβου. Η πολυπλοκότητά της είναι O(n*m), όπου n είναι ο αριθμός των κόμβων και m ο αριθμός των ακμών του κάθε κόμβου. Αυτό συμβαίνει γιατί πρέπει να διατρέξει όλες τις ακμές όλων των κόμβων.
* delete_edge():  Η συνάρτηση αυτή διαγράφει μια ακμή. Η πολυπλοκότητά της είναι O(m) όπως και στην modify_edge().
* delete_edge_from_node(): Η συνάρτηση αυτή διαγράφει όλες τις εισερχόμενες ακμές ενός κόμβου. Η πολυπλοκότητά της είναι O(m) όπου m είναι ο αριθμός των ακμών του κόμβου.
* print_cycle(): Η συνάρτηση αυτή εκτυπώνει έναν κύκλο στο γράφο.  Η πολυπλοκότητά της είναι O(2*n), όπου n είναι ο αριθμός των κόμβων στον κύκλο.
* delete_for_dfs():  Η συνάρτηση αυτή διαγράφει έναν κόμβο από το γράφο κατά τη διάρκεια τηs DFS. Η πολυπλοκότητά της είναι O(n) στο χειρότερο σενάριο,  όπου n είναι ο αριθμός των κόμβων του γράφου.
* dfs_check_cycle():  Η συνάρτηση αυτή υλοποιεί την αναζήτηση βάθους DFS για την εύρεση κύκλων στο γράφο. Η πολυπλοκότητά της είναι O(V + E),  όπου V είναι ο αριθμός των κόμβων και E ο αριθμός των ακμών στο γράφο.
* find_circles():  Η συνάρτηση αυτή καλεί την dfs_check_cycle() για την εύρεση κύκλων. Η πολυπλοκότητά της είναι ίση με την πολυπλοκότητα της dfs_check_cycle(), δηλαδή O(V + E).
* find_node(): Η συνάρτηση αυτή αναζητά έναν κόμβο στο γράφο με βάση το αναγνωριστικό του. Η πολυπλοκότητά της είναι O(n) στο χειρότερο σενάριο, όπου n είναι ο αριθμός των κόμβων. 
* free_graph(): Η συνάρτηση αυτή ελευθερώνει τη μνήμη που έχει δεσμευτεί για το γράφο.  Η πολυπλοκότητά της είναι O(n), όπου n είναι ο αριθμός των κόμβων.

Συναρτήσεις Node:

* create_node(): Η συνάρτηση αυτή δημιουργεί έναν νέο κόμβο. Η πολυπλοκότητά της είναι O(1).
* free_node(): Η συνάρτηση αυτή ελευθερώνει τη μνήμη που έχει δεσμευτεί για τον κόμβο. Η πολυπλοκότητά της είναι O(m), όπου m είναι ο αριθμός των ακμών που ξεκινούν από τον κόμβο.

Συναρτήσεις Edge:

* create_edge(): Η συνάρτηση αυτή δημιουργεί μια νέα ακμή. Η πολυπλοκότητά της είναι O(1).
* free_edge(): Η συνάρτηση αυτή ελευθερώνει τη μνήμη που έχει δεσμευτεί για την ακμή.  Η πολυπλοκότητά της είναι O(1).

Συναρτήσεις Πίνακα Κατακερματισμού (HashTable):

* create_hash_table(): Η συνάρτηση αυτή δημιουργεί έναν νέο πίνακα κατακερματισμού. Η πολυπλοκότητά της είναι O(n), όπου n είναι το αρχικό μέγεθος του πίνακα.
* hash_code(): Η συνάρτηση αυτή υπολογίζει την τιμή κατακερματισμού για ένα αναγνωριστικό κόμβου. Η πολυπλοκότητά της είναι O(k), όπου k είναι το μήκος του char.
* insert_to_hash_table(): Η συνάρτηση αυτή εισάγει έναν κόμβο στον πίνακα κατακερματισμού. Η πολυπλοκότητά της είναι O(1) κατά μέσο όρο, με O(n) worst case, όπου n είναι ο αριθμός των στοιχείων στον πίνακα (αν όλα τα στοιχεία καταλήξουν στο ίδιο bucket). 
* search_hash_table(): Η συνάρτηση αυτή αναζητά έναν κόμβο στον πίνακα κατακερματισμού. Η πολυπλοκότητά της είναι O(1) κατά μέσο όρο, με O(n) worst case, όπως και στην insert_to_hash_table().
* double_hash_table(): Η συνάρτηση αυτή διπλασιάζει το μέγεθος του πίνακα κατακερματισμού. Η πολυπλοκότητά της είναι O(n), όπου n είναι ο αριθμός των στοιχείων στον πίνακα. 
* delete_from_hash_table(): Η συνάρτηση αυτή διαγράφει έναν κόμβο από τον πίνακα κατακερματισμού.  Η πολυπλοκότητά της είναι O(1) κατά μέσο όρο, με O(n) worst case, όπως και στην insert_to_hash_table().
* free_hash_table(): Η συνάρτηση αυτή ελευθερώνει τη μνήμη που έχει δεσμευτεί για τον πίνακα κατακερματισμού. Η πολυπλοκότητά της είναι O(n), όπου n είναι το μέγεθος του πίνακα.